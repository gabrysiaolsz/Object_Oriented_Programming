public interface IGracz {
    public void weźKartę(Karta karta);
    public boolean czyBrać();
    public boolean przekroczonoLimit();
    public int ileOczek();
    public void zakończRozdanie();
    public void dodajPunkt();
}
public abstract AGracz implements IGracz {
    public static final int limitOczek = 21;
    private ArrayList<Karta> karty = new ArrayList<Karta>(); 
    private int liczbaOczek = 0;
    private int sumaPunktów = 0;
    
    @Override
    public void zakończRozdanie() {
        this.liczbaOczek = 0;
        this.karty = new ArrayList<Karta>();
    }
    @Override
    public void weźKartę(Karta karta) {
        this.karty.add(karta);
        this.liczbaOczek += karta.getOczka();
    }
    @Override
    public void dodajPunkt() {
        this.sumaPunktów++;
    }
    @Override
    public boolean przekroczonoLimit() {
        return liczbaOczek > limitOczek;
    }
    @Override 
    public int ileOczek() {
        return liczbaOczek;
    }
}
public class Krupier extends Limitowy {
    public Krupier() {
        super(17);
    }
}
public class Limitowy extends AGracz {
    private int limit;
    
    public Limitowy(int limit) {
        this.limit = limit;
    }
    @Override
    public boolean czyBrać(){
        return this.liczbaOczek < this.limit;
    }
}
public class Losowy extends AGracz {
    private static final Random r = new Random();
    
    public Losowy() {}
    @Override
    public boolean czyBrać() {
        return r.nextBoolean();
    }
}
public class Ostrożny extends Limitowy {
    public Ostrożny {
        super(10);
    }
}
public class Śpiący extends AGracz {
    @Override
    public boolean czyBrać() {
        return false;
    }
}

public class Talia {
    private final int liczbaKart = 52;
    private Karta[] karty;
    private int pierwszaKarta;
    
    public Talia() {
        karty = new Karta[liczbaKart];
        this.dodajNowyKolor(0);
        this.dodajNowyKolor(13);
        this.dodajNowyKolor(26);
        this.dodajNowyKolor(39);
    }
    
    private void dodajNowyKolor(int pozycja){
        for (int i = 2; i < 11; ++i) {
            this.karty[pozycja + i - 2] = new Karta(i); 
        }
        for (int i = 9; i < 12; ++i) {
            this.karty[pozycja + 9] = new Karta(10);
        }
        this.karty[pozycja + 12] = new Karta(11);
    }
    
    public void tasuj() {
        int losowanie[liczbaKart]; 
        for(int i = 0; i < liczbaKart; i++){
            losowanie[i] = i; 
        }
        Collections.shuffle(Arrays.asList(losowanie));
        ArrayList<Karta> noweKarty = new ArrayList<Karta>();
        for(int i = 0; i < liczbaKart; i++){
            noweKarty.add(karty[losowanie[i]]);
        }
        noweKarty.toArray(karty);
        pierwszaKarta = 0;
    }
    
    public int liczbaKart(){
        return this.liczbaKart;
    }
    
    public int ileDobranych() {
        return pierwszaKarta;
    }
    
    public Karta dajKolejną() {
        return karty[pierwszaKarta++];
    }
}

public class Karta {
    private int liczbaOczek;
    public Karta(int liczbaOczek) {
        this.liczbaOczek = liczbaOczek;
    }
}
public class Blotka extends Karta { // Jakby ktoś był ciekawy, blotka to karta o małej wartości. (sprawdzone w słowniku)
    public Blotka(Kolor kolor, int liczbaOczek) {
        this.liczbaOczek = liczbaOczek;
    }
}


public class Rozgrywka {
    private Talia talia;
    private Gracz[] gracze;
    private int liczbaRozdań;
    public Rozgrywka(int liczbaRozdań, Gracz[] gracze) {
        this.liczbaRozdań = liczbaRozdań;
        talia = new Talia();
        this.gracze = gracze;
    }
    
    public boolean czyGramy(){
        return gracze.Length <= talia.liczbaKart();
    }
    
    public void przeprowadzRozgrywke()
    {
        if (czyGramy())
            for (int i = 0; i < this.liczbaRozdań; i++)
                this.przeprowadzRozdanie();
    }
    
    private void przeprowadzRozdanie() {
        talia.tasuj();
        int maxwart=-1;
        //ArrayList<Gracz> zwycięzcy = new ArrayList<Gracz>;
        
        for(Gracz G : gracze) {
            while(talia.ileDobranych() < talia.liczbaKart() && !G.przekroczonoLimit() && G.czyBrać()) {
                G.weźKartę(talia.dajKolejną());    
            }
            
        }
        
        for(Gracz g: gracze){
            if(maxwart < g.ileOczek() && g.ileOczek() <= AGracz.liczbaOczek){
                maxwart = g.ileOczek();
            }
        }
        if(maxwart >= 0){
            for(Gracz g: gracze){
                if(maxwart == g.ileOczek()){
                    g.dodajPunkt();
                }
                g.zakończRozdanie();
            }
        }
        else{
            for(Gracz g: gracze){
                g.zakończRozdanie();
            }
        }
    }
}

